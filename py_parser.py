from word_search_functions import *from statistics_counting_functions import *import argparseimport os.pathparser = argparse.ArgumentParser(description='The script can:\n'+'1. For convenience, it is possible to clone repositories from different sources\n'+'2. Give statistics of the most frequent words by verbs or nouns (VB - verb , NN -noun)\n'+'3. Depending on the parameter, you can analyze frequently used function names or names of local variables of these functions\n'+'4. give statistics of frequently used words in the specified module\n'+'5. Output the result of the script in various formats.\n'+'All parameters are entered with a comma, if there is no paramiter, put a comma.\r\n'+'Enjoy!')parser.add_argument('repository', nargs = "?",type = bool,help='The link to the repository you want to clone')parser.add_argument('partofspeech', nargs = "?",const = str,help='The parts of the speech to be found.')parser.add_argument('codepart', nargs = "?",const = str,help='Any part of the code that needs to be analyzed (FUNCTION, VARIABLE')parser.add_argument('formatsave', nargs = "?",const = str,help='Format of data saving(csv,json)')args = parser.parse_args()if __name__ == "__main__":    parameters = input("enter the report's positional parameters, separated by commas: ").strip().splitlines()    dictparameters = create_a_parameter_dictionary(parameters)    paths = [os.getcwd()]    if dictparameters["paramiternomber_1"] is not None:        pathclone = os.path.abspath(input("please, input your pass where need clone repository: ").strip())        paths = [clone_repository(dictparameters["paramiternomber_1"],pathclone)]    if dictparameters["paramiternomber_2"] != None:        partofspeech = dictparameters["paramiternomber_2"].strip()    else:        partofspeech = None    if dictparameters["paramiternomber_3"] != None:        codepart = dictparameters["paramiternomber_3"].strip()    names = form_path_python_files(paths)    print('total %s files' % len(names))    trees = form_trees_ast(names)    if codepart == "VARIABLE":        codepart = ast.Name        listwords = serch_variables_names(trees, codepart)    elif codepart == "FUNCTION":        codepart = ast.FunctionDef        listnames = search_functions_in_trees(trees, codepart)        listwords = find_not_special_functions_in_tree(listnames)    else:        raise ValueError("Not the correct paramter, correct -  VARIABLE or FUNCTION")    print('trees generated')    splitednames = split_name_in_part_of_speech(listwords)    partsofspeech = search_part_of_speech(splitednames, partofspeech)    mostcommonwords = extract_most_used_functions(partsofspeech)    print('total %s words, %s unique' % (len(mostcommonwords), len(set(mostcommonwords))))    show_the_result_of_counting_words(mostcommonwords)    if dictparameters["paramiternomber_4"] != None:        save_in_file(dictparameters["paramiternomber_4"].strip(), mostcommonwords)